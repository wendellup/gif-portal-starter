{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","getProvider","connection","Connection","Provider","window","solana","createGifAccount","a","provider","program","Program","console","log","rpc","startStuffOff","accounts","publicKey","user","wallet","systemProgram","programId","signers","toString","getGifList","checkIfWalletIsConnected","isPhantom","connect","onlyIfTrusted","response","alert","error","connectWallet","onInputChange","event","value","target","sendGif","length","addGif","useEffect","onLoad","addEventListener","removeEventListener","account","fetch","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a322695.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.4844b78f.svg\";","/*\r\n * We are going to be using the useEffect hook!\r\n */\r\nimport React, { useEffect, useState } from 'react';\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport './App.css';\r\nimport idl from './idl.json';\r\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\r\nimport { Program, Provider, web3 } from '@project-serum/anchor';\r\nimport kp from './keypair.json'\r\n\r\n// Change this up to be your Twitter if you want.\r\nconst TWITTER_HANDLE = '_buildspace';\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst TEST_GIFS = [\r\n  'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\r\n  'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\r\n  'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\r\n  'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\r\n]\r\n\r\n\r\nconst { SystemProgram, Keypair } = web3;\r\n\r\nconst arr = Object.values(kp._keypair.secretKey)\r\nconst secret = new Uint8Array(arr)\r\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\r\n\r\nconst programID = new PublicKey(idl.metadata.address);\r\n\r\nconst network = clusterApiUrl('devnet');\r\n\r\nconst opts = {\r\n  preflightCommitment: \"processed\"\r\n}\r\n\r\n\r\n\r\nconst App = () => {\r\n  // State\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [gifList, setGifList] = useState([]);\r\n\r\n  const getProvider = () => {\r\n    const connection = new Connection(network, opts.preflightCommitment);\r\n    const provider = new Provider(\r\n      connection, window.solana, opts.preflightCommitment,\r\n    );\r\n    return provider;\r\n  }\r\n\r\n  const createGifAccount = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      console.log(\"ping\")\r\n      await program.rpc.startStuffOff({\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        },\r\n        signers: [baseAccount]\r\n      });\r\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\r\n      await getGifList();\r\n\r\n    } catch (error) {\r\n      console.log(\"Error creating BaseAccount account:\", error)\r\n    }\r\n  }\r\n\r\n  /*\r\n   * This function holds the logic for deciding if a Phantom Wallet is\r\n   * connected or not\r\n   */\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { solana } = window;\r\n\r\n      if (solana) {\r\n        if (solana.isPhantom) {\r\n          console.log('Phantom wallet found!');\r\n\r\n          /*\r\n         * The solana object gives us a function that will allow us to connect\r\n         * directly with the user's wallet!\r\n         */\r\n          const response = await solana.connect({ onlyIfTrusted: true });\r\n          console.log(\r\n            'Connected with Public Key:',\r\n            response.publicKey.toString()\r\n          );\r\n          setWalletAddress(response.publicKey.toString());\r\n        }\r\n      } else {\r\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n    const { solana } = window;\r\n\r\n    if (solana) {\r\n      const response = await solana.connect();\r\n      console.log('Connected with Public Key:', response.publicKey.toString());\r\n      setWalletAddress(response.publicKey.toString());\r\n    }\r\n  };\r\n\r\n  const renderNotConnectedContainer = () => (\r\n    <button\r\n      className=\"cta-button connect-wallet-button\"\r\n      onClick={connectWallet}\r\n    >\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\n  const onInputChange = (event) => {\r\n    const { value } = event.target;\r\n    setInputValue(value);\r\n  };\r\n\r\n  const sendGif = async () => {\r\n    if (inputValue.length === 0) {\r\n      console.log(\"No gif link given!\")\r\n      return\r\n    }\r\n    setInputValue('');\r\n    console.log('Gif link:', inputValue);\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n  \r\n      await program.rpc.addGif(inputValue, {\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n        },\r\n      });\r\n      console.log(\"GIF successfully sent to program\", inputValue)\r\n  \r\n      await getGifList();\r\n    } catch (error) {\r\n      console.log(\"Error sending GIF:\", error)\r\n    }\r\n  };\r\n\r\n  const renderConnectedContainer = () => {\r\n    // If we hit this, it means the program account hasn't been initialized.\r\n  if (gifList === null) {\r\n    return (\r\n      <div className=\"connected-container\">\r\n        <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\r\n          Do One-Time Initialization For GIF Program Account\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n  // Otherwise, we're good! Account exists. User can submit GIFs.\r\n  else {\r\n    return (\r\n      <div className=\"connected-container\">\r\n        {/* Go ahead and add this input and button to start */}\r\n        <form\r\n          onSubmit={(event) => {\r\n            event.preventDefault();\r\n            sendGif();\r\n          }}\r\n        >\r\n          <input type=\"text\" placeholder=\"Enter gif link!\" value={inputValue} onChange={onInputChange} />\r\n          <button type=\"submit\" className=\"cta-button submit-gif-button\">Submit</button>\r\n        </form>\r\n        <div className=\"gif-grid\">\r\n\t\t\t\t\t{/* We use index as the key instead, also, the src is now item.gifLink */}\r\n          {gifList.map((item, index) => (\r\n            <div className=\"gif-item\" key={index}>\r\n              <img src={item.gifLink} />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>)\r\n  }\r\n};\r\n\r\n/*\r\n * When our component first mounts, let's check to see if we have a connected\r\n * Phantom Wallet\r\n */\r\nuseEffect(() => {\r\n  const onLoad = async () => {\r\n    await checkIfWalletIsConnected();\r\n  };\r\n  window.addEventListener('load', onLoad);\r\n  return () => window.removeEventListener('load', onLoad);\r\n}, []);\r\n\r\nconst getGifList = async () => {\r\n  try {\r\n    const provider = getProvider();\r\n    const program = new Program(idl, programID, provider);\r\n    const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\r\n\r\n    console.log(\"Got the account\", account)\r\n    setGifList(account.gifList)\r\n\r\n  } catch (error) {\r\n    console.log(\"Error in getGifList: \", error)\r\n    setGifList(null);\r\n  }\r\n}\r\n\r\nuseEffect(() => {\r\n  if (walletAddress) {\r\n    console.log('Fetching GIF list...');\r\n    getGifList()\r\n  }\r\n}, [walletAddress]);\r\n\r\nreturn (\r\n  <div className=\"App\">\r\n    <div className={walletAddress ? 'authed-container' : 'container'}>\r\n      <div className=\"header-container\">\r\n        <p className=\"header\">ðŸ–¼ GIF Portal</p>\r\n        <p className=\"sub-text\">\r\n          View your GIF collection in the metaverse âœ¨\r\n        </p>\r\n        {!walletAddress && renderNotConnectedContainer()}\r\n        {walletAddress && renderConnectedContainer()}\r\n      </div>\r\n      <div className=\"footer-container\">\r\n        <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n        <a\r\n          className=\"footer-text\"\r\n          href={TWITTER_LINK}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >{`built on @${TWITTER_HANDLE}`}</a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}